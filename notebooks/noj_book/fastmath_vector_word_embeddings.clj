;; # Word embeddings with `fastmath.vector` - DRAFT ðŸ› 

;; authors: Nedeljko Radovanovic, Epidiah Ravachol, Daniel Slutsky

;; One of the uses of linear algebra is the embedding of texts 
;; (e.g., tokens, words, sentences, or chunks of texts)
;; into high-dimentional vector spaces.
;;
;; Even in relatively simple embedding methods like 
;; [Word2Vec](https://en.wikipedia.org/wiki/Word2vec),
;; the linear structure of vector space operations
;; (e.g., addition, subtraction) can be meaningful
;; in a way that relates to the meaning of texts.

;; ## Setup

(ns noj-book.fastmath-vector-word-embeddings
  (:require [clojure.string :as str]
            [tablecloth.api :as tc]
            [fastmath.vector :as vec]
            [scicloj.tableplot.v1.plotly :as plotly]
            [scicloj.kindly.v4.kind :as kind]))

;; ## Data file

;; We will look into a few example vectors generated by Word2Vec.
;; The original file `wiki-news-300d-1M.vec.zip` was downloaded 
;; [from the fasttext website](https://fasttext.cc/docs/en/english-vectors.html#content).
;; In the unix shell, we can process it as follows to generate `examples.vec`:
;; ```
;; zcat wiki-news-300d-1M.vec.zip | awk '$1=="female" || $1=="male" || $1=="queen" || $1=="king" || $1=="programming" || $1=="data" || $1=="bike" || $1=="bycicle"' > examples.vec
;; ```

(def examples-path "data/word2vec/examples.vec")

(kind/code 
  (slurp examples-path))

;; ## Reading the data

(def embeddings
  (-> examples-path 
      slurp
      (str/split #"\n")
      (->> (map (fn [line]
                  (let [[token & weights] (str/split line #" ")]
                    [(keyword token)
                     (double-array (map #(Double/parseDouble %) weights))])))
           (into {}))))

(-> embeddings
    tc/dataset
    tc/info)

;; ## Exploring distances

(-> (for [[token1 vec1] embeddings
          [token2 vec2] embeddings
          :when (pos? (compare token1 token2))]
      {:token1 token1
       :token2 token2
       :distance (vec/dist vec1 vec2)})
    tc/dataset
    (tc/drop-rows #(= (:token1 %)
                      (:token2 %)))
    (tc/order-by [:distance])
    (kind/table {:use-datatables true}))

;; ## Exploring relationships

;; female-male is relatively close to queen-king.
;; This way, the structure of the vector space
;; reflects relationships between words.

(let [{:keys [queen king female male]} embeddings]
  (vec/dist
   (vec/sub female male)
   (vec/sub queen king)))

;; compared to:

(let [{:keys [queen king data programming]} embeddings]
  (vec/dist
   (vec/sub data programming)
   (vec/sub queen king)))

;; A different way to pharse it is:
;; "queen minus female plus male is close to king".

(let [{:keys [queen king female male]} embeddings]
  (-> queen
      (vec/sub female)
      (vec/add male)
      (vec/dist king)))

