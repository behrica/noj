;; # Word embeddings with `fastmath.vector` - DRAFT ðŸ› 

;; authors: Nedeljko Radovanovic, Epidiah Ravachol, Daniel Slutsky

;; ## Setup

(ns noj-book.fastmath-vector-word-embeddings
  (:require [clojure.string :as str]
            [tablecloth.api :as tc]
            [fastmath.vector :as vec]
            [scicloj.tableplot.v1.plotly :as plotly]))

;; We will look into a few example vectors generated by
;; [Word2Vec](https://en.wikipedia.org/wiki/Word2vec).
;; The original file `wiki-news-300d-1M.vec.zip` was downloaded from:
;; https://fasttext.cc/docs/en/english-vectors.html#content
;; Then, we ran the following to generate `examples.vec`:
;; ```
;; zcat wiki-news-300d-1M.vec.zip | awk '$1=="female" || $1=="male" || $1=="queen" || $1=="king" || $1=="programming" || $1=="data" || $1=="bike" || $1=="bycicle"' > examples.vec
;; ```

(def embeddings
  (-> "data/word2vec/examples.vec"
      slurp
      (str/split #"\n")
      (->> (map (fn [line]
                  (let [[token & weights] (str/split line #" ")]
                    [(keyword token)
                     (double-array (map #(Double/parseDouble %) weights))])))
           (into {}))))

(-> embeddings
    tc/dataset
    tc/info)

;; female-male is relatively close to queen-king.
;; This way, the structure of the vector space
;; reflects relationships between words.

(let [{:keys [queen king female male]} embeddings]
  (vec/dist
   (vec/sub female male)
   (vec/sub queen king)))

(let [{:keys [queen king data programming]} embeddings]
  (vec/dist
   (vec/sub data programming)
   (vec/sub queen king)))
